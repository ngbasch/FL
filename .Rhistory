library(shinyjs)
library(sf)
library(shinydashboard)
library(zoo)
library(xts)
runApp('Code/app_dashboard.R')
# Load packages
library(tidyverse)
library(shinyWidgets)
runApp('Code/app_dashboard.R')
library(readxl)
library(rjson)
library(plotly)
library(tigris)
library(maps)
library(leaflet)
library(rmapshaper)
library(janitor)
library(DBI)
runApp('Code/app_dashboard.R')
combined_in<-read_csv("Intermediate/combined.csv")
donors<-read_csv("Intermediate/donors.csv")
recipients<-read_csv("Intermediate/recipients.csv")
#Load libraries
library(leaflet)
library(RColorBrewer)
library(scales)
library(lattice)
library(dplyr)
library(shinyWidgets)
library(ggplot2)
library(plotly)
library(DT)
library(lubridate)
library(googledrive)
library(rlang)
library(leaflet.extras)
library(shinyWidgets)
library(googledrive)
library(googlesheets4)
library(shinydashboard)
library(rintrojs)
library(shinyBS)
library(shinyjs)
library(tidyverse)
combined_in<-read_csv("Intermediate/combined.csv")
donors<-read_csv("Intermediate/donors.csv")
recipients<-read_csv("Intermediate/recipients.csv")
setwd("/users/nathanbasch/Documents/FL")
combined_in<-read_csv("Intermediate/combined.csv")
donors<-read_csv("Intermediate/donors.csv")
recipients<-read_csv("Intermediate/recipients.csv")
library(shiny); runApp('Code/app_dashboard.R')
library(rmapshaper)
runApp('Code/app_dashboard.R')
runApp('Code/app_dashboard.R')
runApp('Code/app_dashboard.R')
runApp('Code/app_dashboard.R')
library(rmshaper)
library(shinyWidgets)
runApp('Code/app_dashboard.R')
library(rmapshaper)
runApp('Code/app_dashboard.R')
# Load packages
library(tidyverse)
library(janitor)
library(shinyWidgets)
library(readxl)
library(rjson)
library(plotly)
library(tigris)
library(maps)
runApp('Code/app_dashboard.R')
library(leaflet)
library(rmapshaper)
library(janitor)
library(DBI)
runApp('Code/app_dashboard.R')
?DBI
runApp('Code/app_dashboard.R')
?show
runApp('Code/app_dashboard.R')
runApp('Code/app_dashboard.R')
#Load libraries
library(leaflet)
library(RColorBrewer)
library(scales)
library(lattice)
library(dplyr)
library(shinyWidgets)
library(ggplot2)
library(plotly)
library(DT)
library(lubridate)
library(googledrive)
library(rlang)
library(leaflet.extras)
library(shinyWidgets)
library(googledrive)
library(googlesheets4)
library(shinydashboard)
library(rintrojs)
library(shinyBS)
library(shinyjs)
library(tidyverse)
library(shiny); runApp('Code/app_dashboard.R')
library(AMR)
library(data.table)
library(DT)
library(ggridges)
library(lubridate)
library(plotly)
library(qicharts2)
library(rintrojs)
library(shiny)
library(shinyBS)
library(shinycssloaders)
library(shinydashboard)
library(shinyjs)
library(shinyWidgets)
library(survival)
library(ggpubr)
library(survminer)
library(tidyverse)
library(viridis)
library(zoo)
runApp('Code/app_dashboard.R')
hide("tabID")
runApp('Code/app_dashboard.R')
runApp('Code/app_dashboard.R')
runApp('Code/app_dashboard.R')
runApp('Code/app_dashboard.R')
runApp('~/OneDrive - INDIGO AG, INC/Coding/Historical Bid Analysis/Shiny App/historical_bid_app.R')
library(shiny); runApp('~/OneDrive - INDIGO AG, INC/Coding/Historical Bid Analysis/Shiny App/historical_bid_app.R')
runApp('~/OneDrive - INDIGO AG, INC/Coding/Historical Bid Analysis/Shiny App/historical_bid_app.R')
runApp('~/OneDrive - INDIGO AG, INC/Coding/Historical Bid Analysis/Shiny App/historical_bid_app.R')
runApp('~/OneDrive - INDIGO AG, INC/Coding/Historical Bid Analysis/Shiny App/historical_bid_app.R')
combined_in<-read_csv("Intermediate/combined.csv")
donors<-read_csv("Intermediate/donors.csv")
recipients<-read_csv("Intermediate/recipients.csv")
runApp('Code/app_dashboard.R')
runApp('Code/app_dashboard.R')
runApp('~/OneDrive - INDIGO AG, INC/Coding/Historical Bid Analysis/Shiny App/historical_bid_app.R')
runApp('~/OneDrive - INDIGO AG, INC/Coding/Historical Bid Analysis/Shiny App/historical_bid_app.R')
runApp('Code/app_dashboard.R')
runApp('Code/app_dashboard.R')
combined_in<-read_csv("Intermediate/combined.csv")
donors<-read_csv("Intermediate/donors.csv")
recipients<-read_csv("Intermediate/recipients.csv")
runApp('Code/app_dashboard.R')
runApp('Code/app_dashboard.R')
runApp('Code/app_dashboard.R')
runApp('Code/app_dashboard.R')
runApp('Code/app_dashboard.R')
runApp('Code/app_dashboard.R')
View(combined_in)
#INPUTS -------------
SIDEBAR_WIDTH = 300
df_names<-c("combined", "donors", "recipients")
u<-paste0("https://github.com/ngbasch/FL/raw/master/Intermediate/",df_names,".Rda")
colors<-c("#c95e4a","#5aad6a","#c55a9f", "#c9a944","#777acd","#7e7c34")
town_colors<-c("#4570b0", "#62bf4b","#ad5bd0","#a8b635", "#697ceb", "#d49f37","#6252b6",
"#51903a","#d143a0", "#5ec288","#df3f79","#42bec7","#de4452","#388661","#c2432b",
"#7aa3e3","#e37632","#876db3","#adb064","#a24e99","#667228","#d48ad8","#8e6f2e", "#dd80a8",
"#a25b2c", "#994974","#dc996b", "#af4056","#e17e7d", "#995258")
#Function to clean units --------------------------------------
addUnits <- function(n, dec = 0) {
labels <- ifelse(n < 1000, n,  # less than thousands
ifelse(n < 1e6, paste0(round(n/1e3, dec), 'k'),  # in thousands
ifelse(n < 1e9, paste0(round(n/1e6, dec), 'M'),  # in millions
ifelse(n < 1e12, paste0(round(n/1e9, dec), 'B'), # in billions
paste0(round(n/1e12, dec),'T')
))))
return(labels)
}
Tabulate<-function(df, level){
df%>%
mutate(var = case_when(
level == "Daily" ~ date,
level == "Weekly" ~ floor_date(date, "week"),
level == "Monthly" ~ as.Date(paste(year(date), month(date), "01",sep = "-")),
level == "Quarterly" ~ as.Date(paste(year(date), (ceiling(month(date)/3)-1)*3+1, "01", sep = "-")),
level == "Annually" ~ as.Date(paste(year(date), "01", "01", sep = "-"))
)
)%>%
group_by(var, type, direction)%>%
summarise(lb = sum(lb))
}
combined_in%>%
Tabulate("Monthly")
ggplot(aes(x = quarter, y = perc, fill = town))+
geom_col()+
scale_fill_manual(values = colors)+
labs(x = "", y = "Proportion of Lbs", title = "Recipient Lbs, by Town", colour = "")+
theme_bw()
combined_in%>%
Tabulate("Monthly")%>%
group_by(direction, var)%>%
mutate(perc_lb = lb/sum(lb))
combined_in%>%
Tabulate("Monthly")%>%
group_by(direction, var)%>%
mutate(perc_lb = lb/sum(lb))%>%
ggplot(aes(x = var, y = perc_lb, fill = type))+
geom_col()+
scale_fill_manual(values = colors)+
labs(x = "", y = "Proportion of Lbs", title = "Recipient Lbs, by Town", colour = "")+
theme_bw()
combined_in%>%
Tabulate("Monthly")%>%
group_by(direction, var)%>%
mutate(perc_lb = lb/sum(lb))%>%
ggplot(aes(x = var, y = perc_lb, fill = type))+
geom_col()+
scale_fill_manual(values = colors)+
labs(x = "", y = "Proportion of Lbs", title = "Recipient Lbs, by Town", colour = "")+
facet_wrap(~direction) +
theme_bw()
combined_in%>%
Tabulate("Monthly")%>%
group_by(direction, var)%>%
mutate(perc_lb = lb/sum(lb))%>%
ggplot(aes(x = var, y = perc_lb, fill = type))+
geom_col()+
scale_fill_manual(values = colors)+
labs(x = "", y = "Proportion of Lbs", title = "Recipient Lbs, by Food Type", colour = "")+
facet_wrap(~direction) +
theme_bw()
runApp('Code/app_dashboard.R')
combined_in%>%
Tabulate(input$trend)
combined_in%>%
Tabulate(input$trend)
combined_in%>%
Tabulate("Monthly")%>%
#  mutate(direction =fct_reorder(direction, -lb))%>%
ggplot(aes(x = var, y = lb, fill = type))+
scale_fill_manual(values = colors)+
geom_col()+
labs(x = "", y = paste0(input$trend," Lbs"), title = paste0("Historical Comparison (", input$trend,")"), fill = "")+
facet_wrap(~direction)+
theme_bw()
combined_in%>%
Tabulate("Monthly")
combined_in%>%
Tabulate("Monthly")%>%
group_by(var,direction)%>%
summarise(lb = sum(lb))%>%
#  mutate(direction =fct_reorder(direction, -lb))%>%
ggplot(aes(x = var, y = lb, colour = direction))+
geom_line()+
labs(x = "", y = paste0(input$trend," Lbs"), title = paste0("Historical Comparison (", input$trend,")"), fill = "")+
facet_wrap(~direction)+
theme_bw()
runApp('Code/app_dashboard.R')
runApp('Code/app_dashboard.R')
runApp('Code/app_dashboard.R')
runApp('Code/app_dashboard.R')
runApp('Code/app_dashboard.R')
runApp('Code/app_dashboard.R')
runApp('Code/app_dashboard.R')
runApp('Code/app_dashboard.R')
runApp('Code/app_dashboard.R')
runApp('Code/app_dashboard.R')
runApp('Code/app_dashboard.R')
runApp('Code/app_dashboard.R')
runApp('Code/app_dashboard.R')
runApp('Code/app_dashboard.R')
runApp('Code/app_dashboard.R')
runApp('Code/app_dashboard.R')
runApp('Code/app_dashboard.R')
runApp('Code/app_dashboard.R')
runApp('Code/app_dashboard.R')
runApp('Code/app_dashboard.R')
?introBox
runApp('Code/app_dashboard.R')
runApp('Code/app_dashboard.R')
runApp('Code/app_dashboard.R')
runApp('Code/app_dashboard.R')
runApp('Code/app_dashboard.R')
runApp('Code/app_dashboard.R')
runApp('Code/app_dashboard.R')
runApp('Code/app_dashboard.R')
runApp('Code/app_dashboard.R')
runApp('Code/app_dashboard.R')
runApp('Code/app_dashboard.R')
runApp('Code/app_dashboard.R')
runApp('Code/app_dashboard.R')
runApp('Code/app_dashboard.R')
#Calculate weekly Lbs
weekly_Lbs<-
combined_in %>%
mutate(week = floor_date(date, "week"))%>%
group_by(week, type, name, direction)%>%
summarise(week_lb = sum(lb, na.rm=T) )%>%
group_by(type, name, direction)%>%
summarise(weekly_lb = mean(week_lb))%>%
arrange(type)%>%
group_by(name, direction)%>%
summarise(weekly_label = paste(paste0(type,": ", round(weekly_lb,1), "lb / wk"), collapse = "<br>"),
total_weekly_lbs = sum(weekly_lb))
View(weekly_Lbs)
#Calculate weekly Lbs
weekly_Lbs<-
combined_in %>%
mutate(week = floor_date(date, "week"))%>%
group_by(week, type, name, direction)%>%
summarise(week_lb = sum(lb, na.rm=T) )%>%
group_by(type, name, direction)%>%
summarise(weekly_lb = mean(week_lb))%>%
arrange(type)%>%
group_by(name, direction)%>%
summarise(weekly_label = paste(paste0(type,": ", round(weekly_lb,1), "lb / wk"), collapse = "<br>"),
total_weekly_lbs = sum(weekly_lb))
locations<-donors%>%select("agency" = donor, lon, lat)%>%mutate(label = "donor", color = "blue")%>%
bind_rows(
recipients%>%
select("agency" = recipient_agency, lon, lat)%>%
mutate(label = "recipient", color = "red")
)%>%
filter(!is.na(lon))%>%
mutate(agency = tolower(agency))%>%
#NOTE - doing an inner join here will remove any recipients/donors who don't exist in the transactional data
inner_join (weekly_Lbs%>%select(-direction), by = c("agency" = "name"))%>%
mutate(weekly_label= ifelse(is.na(weekly_label), "", weekly_label))
locations%>%
filter(label %in% input$direction)
runApp('Code/app_dashboard.R')
library(shiny); runApp('Code/app_dashboard.R')
runApp('Code/app_dashboard.R')
df_names<-c("combined", "donors", "recipients")
u<-paste0("https://github.com/ngbasch/FL/raw/master/Intermediate/",df_names,".Rda")
for (i in (1:length(df_names))){
load(url(u[i]))
}
runApp('Code/app_dashboard.R')
#Calculate weekly Lbs
weekly_Lbs<-
combined_in %>%
mutate(week = floor_date(date, "week"))%>%
group_by(week, type, name, direction)%>%
summarise(week_lb = sum(lb, na.rm=T) )%>%
group_by(type, name, direction)%>%
summarise(weekly_lb = mean(week_lb))%>%
arrange(type)%>%
group_by(name, direction)%>%
summarise(weekly_label = paste(paste0(type,": ", round(weekly_lb,1), "lb / wk"), collapse = "<br>"),
total_weekly_lbs = sum(weekly_lb))
combined_in<-combined
#Calculate weekly Lbs
weekly_Lbs<-
combined_in %>%
mutate(week = floor_date(date, "week"))%>%
group_by(week, type, name, direction)%>%
summarise(week_lb = sum(lb, na.rm=T) )%>%
group_by(type, name, direction)%>%
summarise(weekly_lb = mean(week_lb))%>%
arrange(type)%>%
group_by(name, direction)%>%
summarise(weekly_label = paste(paste0(type,": ", round(weekly_lb,1), "lb / wk"), collapse = "<br>"),
total_weekly_lbs = sum(weekly_lb))
locations<-donors%>%select("agency" = donor, lon, lat)%>%mutate(label = "donor", color = "blue")%>%
bind_rows(
recipients%>%
select("agency" = recipient_agency, lon, lat)%>%
mutate(label = "recipient", color = "red")
)%>%
filter(!is.na(lon))%>%
mutate(agency = tolower(agency))%>%
#NOTE - doing an inner join here will remove any recipients/donors who don't exist in the transactional data
inner_join (weekly_Lbs%>%select(-direction), by = c("agency" = "name"))%>%
mutate(weekly_label= ifelse(is.na(weekly_label), "", weekly_label))
locations%>%
filter(label %in% input$direction)
View(locations)
View(locations)
ggplot(aes(x = total_weekly_lbs, colour = type))+
geom_density()
#  locations_reactive()%>%
locations%>%
ggplot(aes(x = total_weekly_lbs, colour = type))+
geom_density()
locations$type
locations$label
#  locations_reactive()%>%
locations%>%
ggplot(aes(x = total_weekly_lbs, colour = label))+
geom_density()
#  locations_reactive()%>%
locations%>%
ggplot(aes(x = total_weekly_lbs, colour = label))+
geom_histogram()+
#scale_fill_manual(values = colors)+
labs(x = "Total Weekly Lbs", y = "Donors/Recipients")+
facet_wrap(~direction) +
theme_bw()
#  locations_reactive()%>%
locations%>%
ggplot(aes(x = total_weekly_lbs, colour = label))+
geom_histogram()
#  locations_reactive()%>%
locations%>%
ggplot(aes(x = total_weekly_lbs, colour = label))+
geom_density()
#  locations_reactive()%>%
locations%>%
ggplot(aes(x = total_weekly_lbs, colour = label))+
geom_density()+
#scale_fill_manual(values = colors)+
labs(x = "Total Weekly Lbs", y = "Donors/Recipients")+
facet_wrap(~direction) +
theme_bw()
#  locations_reactive()%>%
locations%>%
ggplot(aes(x = total_weekly_lbs, colour = label))+
geom_density(alpha = 0.1)+
#scale_fill_manual(values = colors)+
labs(x = "Total Weekly Lbs", y = "Donors/Recipients")+
facet_wrap(~direction) +
theme_bw()
#  locations_reactive()%>%
locations%>%
ggplot(aes(x = total_weekly_lbs, colour = label))+
geom_density(alpha = 0.1)+
#scale_fill_manual(values = colors)+
labs(x = "Total Weekly Lbs", y = "Donors/Recipients")+
theme_bw()
#  locations_reactive()%>%
locations%>%
ggplot(aes(x = total_weekly_lbs, fill = label, colour = label))+
geom_density(alpha = 0.1)+
#scale_fill_manual(values = colors)+
labs(x = "Total Weekly Lbs", y = "Donors/Recipients")+
theme_bw()
#  locations_reactive()%>%
locations%>%
ggplot(aes(x = total_weekly_lbs, fill = label, colour = label))+
geom_density(alpha = 0.1)+
#scale_fill_manual(values = colors)+
labs(x = "Total Weekly Lbs", y = "Donors/Recipients", fill = "", label = "")+
theme_bw()
#  locations_reactive()%>%
locations%>%
ggplot(aes(x = total_weekly_lbs, fill = label, colour = label))+
geom_density(alpha = 0.1)+
#scale_fill_manual(values = colors)+
labs(x = "Total Weekly Lbs", y = "Donors/Recipients", fill = "")+
theme_bw()
#  locations_reactive()%>%
locations%>%
ggplot(aes(x = total_weekly_lbs, fill = label, colour = label))+
geom_density(alpha = 0.1)+
#scale_fill_manual(values = colors)+
labs(x = "Total Weekly Lbs", y = "Donors/Recipients", fill = "", colour = "")+
theme_bw()
#  locations_reactive()%>%
locations%>%
ggplot(aes(x = total_weekly_lbs, fill = label, colour = label))+
geom_histogram(alpha = 0.1)+
#scale_fill_manual(values = colors)+
labs(x = "Total Weekly Lbs", y = "Donors/Recipients", fill = "", colour = "")+
theme_bw()
#  locations_reactive()%>%
locations%>%
ggplot(aes(x = total_weekly_lbs, fill = label, colour = label))+
geom_histogram(position = "dodge",alpha = 0.1)+
#scale_fill_manual(values = colors)+
labs(x = "Total Weekly Lbs", y = "Donors/Recipients", fill = "", colour = "")+
theme_bw()
#  locations_reactive()%>%
locations%>%
filter(labl == "donor")%>%
ggplot(aes(x = total_weekly_lbs, fill = label, colour = label))+
geom_histogram(position = "dodge",alpha = 0.1)+
#scale_fill_manual(values = colors)+
labs(x = "Total Weekly Lbs", y = "Donors/Recipients", fill = "", colour = "")+
theme_bw()
#  locations_reactive()%>%
locations%>%
filter(label == "donor")%>%
ggplot(aes(x = total_weekly_lbs, fill = label, colour = label))+
geom_histogram(position = "dodge",alpha = 0.1)+
#scale_fill_manual(values = colors)+
labs(x = "Total Weekly Lbs", y = "Donors/Recipients", fill = "", colour = "")+
theme_bw()
#  locations_reactive()%>%
locations%>%
ggplot(aes(x = total_weekly_lbs, fill = label, colour = label))+
geom_histogram(position = "dodge",alpha = 0.1)+
#scale_fill_manual(values = colors)+
labs(x = "Total Weekly Lbs", y = "Donors/Recipients", fill = "", colour = "")+
facet_wrap(~label)
#  locations_reactive()%>%
locations%>%
ggplot(aes(x = total_weekly_lbs, fill = label, colour = label))+
geom_histogram(position = "dodge",alpha = 0.1)+
#scale_fill_manual(values = colors)+
labs(x = "Total Weekly Lbs", y = "Donors/Recipients", fill = "", colour = "")+
facet_wrap(~label)+
theme_bw()
runApp('Code/app_dashboard.R')
runApp('Code/app_dashboard.R')
library(shiny); runApp('Code/app_dashboard.R')
?coord_flip
runApp('Code/app_dashboard.R')
runApp('Code/app_dashboard.R')
runApp('Code/app_dashboard.R')
runApp('Code/app_dashboard.R')
runApp('Code/app_dashboard.R')
runApp('Code/app_dashboard.R')
runApp('Code/app_dashboard.R')
runApp('Code/app_dashboard.R')
